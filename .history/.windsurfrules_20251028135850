# Code Style
- Follow the Airbnb (JS/TS) or PEP8 (Python) style guide.
- Use English for all code/comments.
- Prefer named exports and modular components.

# Project Structure
- Organize logic in core; helpers in utils; configs in config folders.
- Use PascalCase for component names, kebab-case for directories.

# Data & State
- Use TanStack Query/react-query for data fetching.
- Use React Context for state management.
- Ensure immutability for all shared data.

# Functions
- Keep functions <20 lines; one export per file.
- Use early returns and avoid deeply nested blocks.

# Accessibility & UI
- Support accessibility using ARIA/natives.
- Use Tailwind CSS or styled-components for styles.
- Responsive design and dark mode support by default.

# Database
- Use Prisma for DB.
- Class-based validation only, no scattered inline checking.

# Testing
- Maintain e2e and unit tests for all features.
- Debugging scripts in scripts/debugging_tools.

# Documentation
- Use JSDoc (JS/TS) or docstrings (Python).
- Explain “why” for any nontrivial logic.
# Code Style
- Follow the Airbnb (JS/TS) or PEP8 (Python) style guide.
- Use English for all code/comments.
- Prefer named exports and modular components.

# Project Structure
- Organize logic in core; helpers in utils; configs in config folders.
- Use PascalCase for component names, kebab-case for directories.

# Data & State
- Use TanStack Query/react-query for data fetching.
- Use React Context for state management.
- Ensure immutability for all shared data.

# Functions
- Keep functions <20 lines; one export per file.
- Use early returns and avoid deeply nested blocks.

# Accessibility & UI
- Support accessibility using ARIA/natives.
- Use Tailwind CSS or styled-components for styles.
- Responsive design and dark mode support by default.

# Database
- Use Prisma for DB.
- Class-based validation only, no scattered inline checking.

# Testing
- Maintain e2e and unit tests for all features.
- Debugging scripts in scripts/debugging_tools.

# Documentation
- Use JSDoc (JS/TS) or docstrings (Python).
- Explain “why” for any nontrivial logic.
